{"version":3,"sources":["components/Header.js","components/Movies.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","text","Movies","movie","poster","Poster","title","width","alt","Title","src","year","Search","useState","searchValue","setSearchValue","type","value","onChange","e","target","onClick","preventDefault","search","App","loading","setLoading","movies","setMovies","errorMessage","setErrorMessage","useEffect","fetch","then","response","json","jsonResponse","Response","Error","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAUeA,G,MARA,SAACC,GACZ,OACI,4BAAQC,UAAU,cACd,4BAAKD,EAAME,SCiBRC,EAjBF,SAAC,GAAW,IAAVC,EAAS,EAATA,MAELC,EAA0B,QAAjBD,EAAME,OALS,qGAKsCF,EAAME,OAE1E,OACI,yBAAKL,UAAU,SACX,4BAAKG,EAAMG,OACX,6BACI,yBAAKC,MAAM,MACVC,IAAG,4BAAuBL,EAAMM,OAChCC,IAAKN,KAEV,2BAAID,EAAMQ,QCaPC,EA5BA,SAACb,GAAW,IAAD,EAEec,mBAAS,IAFxB,mBAEfC,EAFe,KAEHC,EAFG,KAmBtB,OACI,0BAAMf,UAAU,UACZ,2BAAOgB,KAAK,OAAOC,MAAOH,EAAaI,SAjB1B,SAACC,GAClBJ,EAAeI,EAAEC,OAAOH,UAiBpB,2BAAOD,KAAK,SAASC,MAAM,SAASI,QAVxB,SAACF,GACjBA,EAAEG,iBACFvB,EAAMwB,OAAOT,GALbC,EAAe,SCuDRS,EAxDH,WAAO,IAAD,EACaX,oBAAS,GADtB,mBACTY,EADS,KACDC,EADC,OAEWb,mBAAS,IAFpB,mBAETc,EAFS,KAEFC,EAFE,OAGuBf,mBAAS,MAHhC,mBAGTgB,EAHS,KAGIC,EAHJ,KAMhBC,qBAAU,WACRC,MAXkB,iDAYjBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACHR,EAAUQ,EAAaxB,QACvBc,GAAW,QAEd,IAsBF,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,CAAQC,KAAK,mCACb,kBAAC,EAAD,CAAQsB,OAtBG,SAAAT,GACbY,GAAW,GACXI,EAAgB,MAEhBE,MAAM,8BAAD,OAA+BlB,EAA/B,qBACFmB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAC0B,SAA1BA,EAAaC,UACfT,EAAUQ,EAAaxB,QACvBc,GAAW,KAEXI,EAAgBM,EAAaE,OAC7BZ,GAAW,UAWf,uBAAG1B,UAAU,aAAb,sCACA,yBAAKA,UAAY,UAChByB,IAAYI,EACV,4CACIA,EACH,yBAAK7B,UAAU,gBAAgB6B,GAE/BF,EAAOY,KAAI,SAACpC,EAAOqC,GAAR,OACT,kBAAC,EAAD,CAAQC,IAAG,UAAKD,EAAL,YAAcrC,EAAMM,OAASN,MAAOA,UC7CvCuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4fd35a26.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) =>{\n    return (\n        <header className=\"App-Header\">\n            <h2>{props.text}</h2>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst DEFAULT_PLACEHOLDER_IMAGE = \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\n\n\nconst Movies=({movie})=>{\n\n    const poster = movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\n\n    return(\n        <div className=\"movie\">\n            <h2>{movie.title}</h2>\n            <div>\n                <img width=\"200\"\n                 alt={`The movie titled: ${movie.Title}`}\n                 src={poster}/>\n            </div>\n            <p>{movie.year}</p>\n        </div>\n    )\n}\n\nexport default Movies;","import React,{useState} from 'react';\n\nconst Search = (props) => {\n\n    const [searchValue,setSearchValue] = useState(\"\");\n\n    const handleSearch = (e) =>{\n        setSearchValue(e.target.value);\n    }\n\n    const resetField = () => {\n        setSearchValue(\"\");\n    }\n\n    const searchField = (e) => {\n        e.preventDefault();\n        props.search(searchValue);\n        resetField();\n    }\n\n\n    return (\n        <form className=\"search\">\n            <input type=\"text\" value={searchValue} onChange={handleSearch}/>\n            <input type=\"submit\" value=\"search\" onClick={searchField} />\n        </form>\n\n    );\n}\n\nexport default Search;\n\n\n","import React, { useState, useEffect } from 'react';\nimport '../App.css';\nimport Header from \"./Header\";\nimport Movies from \"./Movies\";\nimport Search from \"./Search\";\n\nconst MOVIE_API_URL = \"http://www.omdbapi.com/?s=man&apikey=4a3b711b\";\n\n\n\nconst App = () => {\n  const [loading,setLoading] = useState(true);\n  const [movies,setMovies] = useState([]);\n  const [errorMessage,setErrorMessage] = useState(null)\n\n\n  useEffect(()=>{\n    fetch(MOVIE_API_URL)\n    .then(response => response.json())\n    .then(jsonResponse => {\n       setMovies(jsonResponse.Search);\n       setLoading(false);\n    });\n  },[]);\n\n\n  const search = searchValue => {\n    setLoading(true);\n    setErrorMessage(null);\n\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.Response === \"True\") {\n          setMovies(jsonResponse.Search);\n          setLoading(false);\n        } else {\n          setErrorMessage(jsonResponse.Error);\n          setLoading(false);\n        }\n      });\n  \t};\n\n\n\n  return (\n    <div className=\"App\">\n      <Header text=\"Movie Search App - React Hooks\"/>\n      <Search search = {search}/>\n      <p className=\"App-intro\">Sharing one of my Favourite Movies</p>\n      <div className = \"movies\">\n      {loading && !errorMessage ? (\n         <span>loading...</span>\n         ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (\n            <Movies key={`${index}-${movie.Title}`} movie={movie} />\n          ))\n        )}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}